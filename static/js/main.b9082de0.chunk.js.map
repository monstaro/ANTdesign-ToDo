{"version":3,"sources":["TasksContext.js","Components/AddTask/AddTask.js","Components/Task/Task.js","Components/AllTasks/AllTasks.js","Components/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["TasksContext","createContext","TasksProvider","props","useState","tasks","setTasks","Provider","value","children","layout","labelCol","span","wrapperCol","tailLayout","offset","AddTask","title","description","setTask","Form","useForm","form","useContext","onReset","resetFields","className","labelAlign","name","onFinish","values","console","log","prevTasks","id","Date","now","alert","Item","label","rules","required","TextArea","type","htmlType","onClick","Task","state","key","noTitleKey","onTabChange","setState","this","style","width","margin","React","Component","AllTasks","map","task","urgency","MainContainer","activePage","pageToDisplay","Header","Layout","Content","Footer","App","updateActivePage","currentPage","theme","mode","defaultSelectedKeys","padding","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9082de0.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const TasksContext = createContext();\n\nexport const TasksProvider = props => {\n    const [tasks, setTasks] = useState([\n\n    ])\n    return (\n        <TasksContext.Provider value={[tasks, setTasks]}>\n            {props.children}\n        </TasksContext.Provider>\n    )\n}\n\n","import React, { useState, useContext } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport './AddTask.css';\nimport {TasksContext} from '../../TasksContext.js';\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 8,\n  },\n};\n\nconst AddTask = () => {\n  const [task, setTask] = useState({title: null, description: null});\n  const [form] = Form.useForm();\n  const [tasks, setTasks] = useContext(TasksContext)\n\nconst onFinish = values => {\n    setTask(values)\n    console.log(values)\n    setTasks(prevTasks => [...prevTasks, {title: values.title, description: values.description, id: Date.now()}])\n    onReset()\n    alert('Task Successfully Added')\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n\n\n  return (\n      <div className=\"task-form\">\n          <p className=\"add-task\"> Ant ToDo </p>\n          <p className=\"add-task-sub\"> Enter a goal to get started </p>\n\n    <Form {...layout} form={form} labelAlign=\"left\" name=\"control-hooks\" onFinish={onFinish}>\n      <Form.Item\n        name=\"title\"\n        label=\"Title\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name=\"description\"\n        label=\"Description\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n          <Input.TextArea />\n      </Form.Item>\n      {/* <Form.Item\n        name=\"Urgency\"\n        label=\"Urgency\"\n        rules={[\n          {\n            required: false,\n          },\n        ]}\n      >\n          <IntegerStep />\n      </Form.Item> */}\n      <Form.Item {...tailLayout}>\n          <div className=\"button-container\">\n      <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n        <Button htmlType=\"button\" onClick={onReset}>\n          Reset\n        </Button>\n        </div>\n      </Form.Item>\n    </Form>\n    </div>\n  );\n};\n\n\n\nexport default AddTask","import React from 'react';\n\nimport { Card } from 'antd';\n\n\nclass Task extends React.Component {\n  state = {\n    key: 'tab1',\n    noTitleKey: 'app',\n  };\n\n  onTabChange = (key, type) => {\n    console.log(key, type);\n    this.setState({ [type]: key });\n  };\n  render() {\n    console.log(this.props)\n    return (\n      <>\n         <Card title={this.props.title} style={{ width: 300, margin: 10 }}>\n            {this.props.description}\n        </Card>\n      </>\n    );\n  }\n}\n\n\nexport default Task;","import React, { useContext } from 'react';\nimport './AllTasks.css';\nimport { TasksContext } from '../../TasksContext';\nimport Task from '../Task/Task';\n\nconst AllTasks = () => {\n    const [tasks] = useContext(TasksContext)\n    console.log(tasks)\n    return (\n\n        <div className=\"tasks-container\">\n             {tasks.map(task => (\n                 <Task \n                  title={task.title}\n                  description={task.description} \n                  urgency={task.urgency}\n                  id={task.id}\n                   />\n             ))}\n        </div>\n    )\n}\n\nexport default AllTasks","import React from 'react';\nimport AddTask from './AddTask/AddTask';\nimport AllTasks from './AllTasks/AllTasks';\nimport './MainContainer.css'\n\nconst MainContainer = ({ activePage }) => {\n    let pageToDisplay = <AddTask />\n        if (activePage === 'addtask') {\n            pageToDisplay = <AddTask />\n        }\n        else if (activePage === 'alltasks') {\n            pageToDisplay = <AllTasks />\n        }\n        return (\n            <div className=\"main-container\">\n            {pageToDisplay}\n            </div>\n        )\n}\n\nexport default MainContainer","import React, { Component } from 'react';\nimport './App.less';\nimport { Layout, Menu, Breadcrumb, Title } from 'antd';\nimport MainContainer from './Components/MainContainer';\nimport { TasksProvider } from './TasksContext';\nconst { Header, Content, Footer } = Layout;\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activePage: 'addtask'\n    }\n  }\n  updateActivePage = (currentPage) => {\n    this.setState({\n      activePage: currentPage\n    })\n  }\n  render() {\n    return (\n    <TasksProvider>\n    <Layout className=\"layout\">\n    <Header>\n    <div className=\"logo\" />\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n        <Menu.Item key=\"1\" onClick={() => this.updateActivePage('addtask')}>Add Task</Menu.Item>\n        <Menu.Item key=\"2\" onClick={() => this.updateActivePage('alltasks')}>All Tasks</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        {/* <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item> */}\n      </Breadcrumb>\n      <div className=\"site-layout-content\">\n      <MainContainer activePage={this.state.activePage}/>\n      </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n  </Layout>\n  </TasksProvider>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}